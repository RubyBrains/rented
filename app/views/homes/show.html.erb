<!DOCTYPE html>
<html>
<head>
	<title></title>
	
	<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    
    
</head>
<body>
	<div >
		<div class="blurImg" id="img1">
			<%= image_tag("1.jpg") %>
		</div>
		<div class="blurImg" id="img2">
			<%= image_tag("2.jpg") %>
		</div>
		<div class="blurImg" id="img3">
			<%= image_tag("3.jpg") %>
		</div>
		<div class="blurImg" id="img4">
			<%= image_tag("4.jpg") %>
		</div>
	</div>
	<div class="blockerDiv"></div>
	
	<div>

	</div>

	<div id="container">
		<% if user_signed_in? %>
			<div id="logger">
				<%= link_to "Log Out", destroy_user_session_path, method: :delete %>
			</div>
		<% else %>	
			<div id="logger">
				<a href="#" onclick="bringDown()">Login / SignUp</a>
			</div>
		<% end %>	
		
		<div class="blockerDiv" id="signBlock" style="z-index:6;display:none;" onclick="removeBlocker(1);">
		</div>
		<div id="signInBox" style="z-index:10;">
			<%= render template:'devise/sessions/new.html.erb' %>
		</div>
		<div id="signUpBox" style="z-index:10;">
			<%= render template:'devise/registrations/new.html.erb' %>
		</div>	
	
		<div id="formContainer">
			
			<%= form_tag places_path, method: 'get' do %>
				<%= text_field_tag :search, params[:search], placeholder: "Search for flats on rent ", id: "pac-input",  class: "controls" %>

			<% end %>
    		<div id="adAdder">
				<%= link_to "Publish Your Own Ad", new_place_path %>
			</div>
		</div>
		<div id="map" style="display:none;"></div>
		<footer>
			<ul>
				<li>&copy; Rented.com | </li>
				<li><a href="#">About Us</a> | </li> 
				<li><a href="#">Contact Us</a> | </li> 
				<li><a href="#">Terms &amp; Conditions</a> | </li> 
			</ul>
		</footer>
	</div>

	<script type="text/javascript">
		function _(inp) {
			return document.getElementById(inp);
		}

		function removeBlocker (inp) {
			if(inp == 0)
				_("signBlock").style.display = "block";
			else{
				_("signBlock").style.display = "none";
				_("pac-input").focus();
				_("signInBox").style.marginTop="-1000px";
				_("signUpBox").style.marginTop="-1000px";
			}
		}

		function bringDown () {
			removeBlocker(0);
			_("user_email").focus();
			_("signInBox").style.marginTop="100px";
			_("signUpBox").style.marginTop="-1000px";
		}

		function signup () {
			removeBlocker(0);
			_("user_name").focus();
			_("signInBox").style.marginTop="-1000px";
			_("signUpBox").style.marginTop="50px";
		}

		function callthis (event) {
			if(event.which == 27)
				removeBlocker(1);
		}

		window.addEventListener("keyup",callthis,false);


	</script>

    <script>
// This example adds a search box to a map, using the Google Place Autocomplete
// feature. People can enter geographical searches. The search box will return a
// pick list containing a mix of places and predicted search terms.

		function initAutocomplete() {

			function _(inp) {
				return document.getElementById(inp);
			}
			_("pac-input").focus();
		  var map = new google.maps.Map(_('map'), {
		    center: {lat: 21, lng: 82},
		    zoom: 4,
		    mapTypeId: google.maps.MapTypeId.ROADMAP
		  });

		  // Create the search box and link it to the UI element.
		  var input = _('pac-input');
		  var searchBox = new google.maps.places.SearchBox(input);
		  //map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

		  // Bias the SearchBox results towards current map's viewport.
		  map.addListener('bounds_changed', function() {
		    searchBox.setBounds(map.getBounds());
		  });

		  var markers = [];
		  // [START region_getplaces]
		  // Listen for the event fired when the user selects a prediction and retrieve
		  // more details for that place.
		  searchBox.addListener('places_changed', function() {
		    var places = searchBox.getPlaces();

		    if (places.length == 0) {
		      return;
		    }

		    // Clear out the old markers.
		    markers.forEach(function(marker) {
		      marker.setMap(null);
		    });
		    markers = [];

		    // For each place, get the icon, name and location.
		    var bounds = new google.maps.LatLngBounds();
		    places.forEach(function(place) {
		      var icon = {
		        url: place.icon,
		        size: new google.maps.Size(71, 71),
		        origin: new google.maps.Point(0, 0),
		        anchor: new google.maps.Point(17, 34),
		        scaledSize: new google.maps.Size(25, 25)
		      };

		      // Create a marker for each place.
		      markers.push(new google.maps.Marker({
		        map: map,
		        icon: icon,
		        title: place.name,
		        position: place.geometry.location
		      }));

		      if (place.geometry.viewport) {
		        // Only geocodes have viewport.
		        bounds.union(place.geometry.viewport);
		      } else {
		        bounds.extend(place.geometry.location);
		      }
		    });
		    map.fitBounds(bounds);
		  });
		  // [END region_getplaces]
		}


	</script>
	<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDusQAmGtEwiKnZ1QQfJI4gLaivOwhv0QA&libraries=places&callback=initAutocomplete"
		         async defer>
	</script>
			

	<script type="text/javascript">
	function _(inp) {
		return document.getElementById(inp);
	}

	var now = 0;
	var ids = ['img1','img2','img3','img4'];
	function changeIt(){
		var i = 0;
		while(i<4){
			if(i!=now){
				_(ids[i]).style.opacity="0";
			}
			i++;
		}
		_(ids[now]).style.opacity="1";
		if(now==3)	now=0;
		else		now++;
	}
	window.setInterval(changeIt,5000);
	</script>>

</body>
</html>
